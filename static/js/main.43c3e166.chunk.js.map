{"version":3,"sources":["material.jsx","App.jsx","serviceWorker.jsx","index.jsx"],"names":["Material","props","css_classes","color","shape","join","className","id","onClick","event","undefined","selectMe","target","children","EFFECT_GROUP_1","EFFECT_GROUP_2","App","useState","selectedMat","setSelectedMat","matStack","setMatStack","playerHand","setPlayerHand","materialDeck","amount","deck","i","random_effect_1","getRndInteger","random_effect_2","mat","push","generateDeck","curDeck","setCurDeck","totalScore","setTotalScore","effect_descriptions","executeMat","material","poppedFromBottom","length","console","log","score","Math","floor","selectMat","replace","min","max","random","map","key","newHand","randomIndex","splice","newStack","matObj","matId","indexToRemove","matFromHand","popMatFromHand","parseInt","unshift","pop","grandTotal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.43c3e166.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Material(props) {\n\n  function clickHandler(event) {\n    if(props.selectMe !== undefined) {\n        props.selectMe(event.target);\n    }\n  }\n  let css_classes = [props.color, props.shape, 'Material'].join(' ');\n  return (\n    <div className={css_classes} id={props.id} onClick={clickHandler}>\n        {props.children}\n    </div>\n  );\n}\n\nexport default Material;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Material from './material.jsx';\n\n//Frame work should be all set. (deck, hand, stack)\n// TODO: when we put something on the stack, how does it interact with the other things?\n// When generating the deck, we will need 'types' of materials. Use these types to determine interactions on stack\nconst BLUE = 'blue';\nconst RED = 'red';\nconst GREEN = 'green';\nconst YELLOW = 'yellow';\nconst CIRCLE = 'circle';\nconst TRIANGLE = 'triangle';\nconst SQUARE = 'square';\nconst EFFECT_GROUP_1 = [BLUE, RED, GREEN, YELLOW];\nconst EFFECT_GROUP_2 = [CIRCLE, TRIANGLE, SQUARE];\n\nfunction App() {\n  const [selectedMat, setSelectedMat] = useState(null);\n  const [matStack, setMatStack] = useState([]);\n  const [playerHand, setPlayerHand] = useState([]);\n  const materialDeck = generateDeck(20);\n  const [curDeck, setCurDeck] = useState(materialDeck);\n  const [totalScore, setTotalScore] = useState(0);\n\n  const effect_descriptions = {\"blue\": \"If a red material is below me, double it's score.\",\n                             \"red\": \"When forced off the stack, add half this score to the 2nd material on the stack.\",\n                             \"green\": \"Increase the score of each adjacent material by 20%\",\n                             \"yellow\": \"When placed, increase the score of the bottom material by 50%\",\n                             \"circle\": \"When forced off the stack, add this score to the top most circle material\",\n                             \"triangle\": \"If this is on the top of the stack AND adjacent to a square, increase both material scores by 25%\",\n                             \"square\": \"If placed above another square, double this material's score.\"}\n\n  function executeMat(material, poppedFromBottom) {\n    //execute the specific material effects, based on the current state of the matStack\n    if(matStack.length > 0){\n        //colors\n        if(material.color === BLUE) {\n            if(matStack[0].color === RED) {\n                console.log(\"blue effect activated!\");\n                matStack[0].score *= 2;\n            }\n        }else if(material.color === RED && poppedFromBottom) {\n            console.log(\"red effect activated!\");\n            matStack[1].score += Math.floor(material.score/2);\n        }else if(material.color === YELLOW) {\n            if(matStack.length == 4) {\n                console.log(\"yellow effect activated!\");\n                matStack[3].score = Math.floor(matStack[3].score * 1.5);\n            }\n        }\n\n        //shapes\n        if(material.shape === SQUARE) {\n            if(matStack[0].shape === SQUARE) {\n                console.log(\"square effect activated!\");\n                material.score *= 2;\n            }\n        }else if(material.shape === CIRCLE && poppedFromBottom) {\n            //find the top most circle\n            for(let i=0; i<4; i++) {\n                if(matStack[i].shape === CIRCLE) {\n                    console.log(\"circle effect activated!\");\n                    matStack[i].score += material.score;\n                    break;\n                }\n            }\n        }\n    }\n  }\n\n  function calculateFinalScore() {\n    if(totalScore > 0) {\n        return;\n    }\n    for(let i=0; i < matStack.length; i++) {\n        let material = matStack[i];\n        //colors\n        if(material.color === GREEN) {\n            if(i > 0) {\n                console.log(\"green effect activated!\");\n                matStack[i-1].score = Math.floor(matStack[i-1].score * 1.2);\n            }\n            if(i < matStack.length-1) {\n                console.log(\"green effect activated!\");\n                matStack[i+1].score = Math.floor(matStack[i+1].score * 1.2);\n            }\n        }\n\n        //shapes\n        if(material.shape === TRIANGLE && i == 0) {\n            if(i+1 < matStack.length && matStack[i+1].shape === SQUARE) {\n                console.log(\"triangle effect activated!\");\n                material.score = Math.floor(material.score * 1.25);\n                matStack[i+1].score = Math.floor(matStack[i+1].score * 1.25);\n            }\n        }\n    }\n    let grandTotal = 0;\n    for(let i=0; i < matStack.length; i++) {\n        let mat = matStack[i];\n        grandTotal += mat.score;\n    }\n    setTotalScore(grandTotal);\n  }\n\n  function generateDeck(amount) {\n    let deck = [];\n    for(let i=0; i < amount; i++) {\n        let random_effect_1 = EFFECT_GROUP_1[getRndInteger(0, 3)];\n        let random_effect_2 = EFFECT_GROUP_2[getRndInteger(0, 2)];\n        let mat = {\"id\": i,\n                   \"color\": random_effect_1,\n                   \"shape\": random_effect_2,\n                   \"score\": 10};\n        deck.push(mat);\n    }\n    return deck;\n  }\n\n  function popMatFromHand(matId) {\n    let newHand = [...playerHand];\n    let indexToRemove = null;\n    let matFromHand = null;\n    for(let i=0; i < newHand.length; i++) {\n        if(newHand[i].id === matId) {\n            indexToRemove = i;\n            break;\n        }\n    }\n    if(indexToRemove !== null) {\n        matFromHand = newHand.splice(indexToRemove, 1)[0];\n        setPlayerHand(newHand);\n    }\n    return matFromHand;\n  }\n\n  function selectMat(material) {\n    if(selectedMat !== null) {\n        selectedMat.className = selectedMat.className.replace(/ active$/, '');\n    }\n    material.className = material.className.replace(/$/, ' active');\n    setSelectedMat(material);\n  }\n\n  function pushMat() {\n    if(selectedMat !== null) {\n        let newStack = [...matStack];\n        let matObj = popMatFromHand(parseInt(selectedMat.id));\n        newStack.unshift(matObj);\n        executeMat(matObj, false);\n        if(newStack.length > 4) {\n            executeMat(newStack.pop(), true);\n        }\n        setMatStack(newStack);\n        selectedMat.className = selectedMat.className.replace(/ active$/, '');\n        setSelectedMat(null);\n    }\n  }\n  function getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\n  }\n  function drawFromDeck() {\n    let newHand = [...playerHand];\n    let deck = [...curDeck];\n    if(deck.length > Math.floor(materialDeck.length/2)){\n        let randomIndex = getRndInteger(0, deck.length-1);\n        newHand.push(deck.splice(randomIndex, 1)[0]); //take a random index from the deck\n        setPlayerHand(newHand);\n        setCurDeck(deck);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n        <div className=\"Deck\">\n            Deck\n            <p>\n            Some starting amount of materials. This would be determined by the crafting recipe.\n            (Maybe players can adjust what goes into the \"deck\"?)\n            </p>\n            <div className=\"GridWrap\">\n                <div className=\"Grid\">\n                    {curDeck.map((mat, i) =>\n                        <Material key={i} color={mat.color} shape={mat.shape}></Material>\n                    )}\n                </div>\n            </div>\n            <button className=\"Btn\" onClick={drawFromDeck}>Draw Material</button>\n            <br />\n            <br />\n            <div className=\"Effects\">\n                <h3>Effects:</h3>\n                <p><b>Blue</b>: {effect_descriptions.blue}</p>\n                <p><b>Red</b>: {effect_descriptions.red}</p>\n                <p><b>Green</b>: {effect_descriptions.green}</p>\n                <p><b>Yellow</b>: {effect_descriptions.yellow}</p>\n                <p><b>Square</b>: {effect_descriptions.square}</p>\n                <p><b>Circle</b>: {effect_descriptions.circle}</p>\n                <p><b>Triangle</b>: {effect_descriptions.triangle}</p>\n            </div>\n        </div>\n        <div className=\"Hand\">\n            Hand\n            <p>\n            The \"hand\" is a random subset of materials from the \"deck\". (Maybe players can adjust the RNG?)\n            </p>\n            <div className=\"Grid\">\n                {playerHand.map((mat, i) =>\n                    <Material key={i} id={mat.id} selectMe={selectMat} color={mat.color} shape={mat.shape}></Material>\n                )}\n            </div>\n            <button className=\"Btn\" onClick={pushMat}>Stack Selected Material</button>\n        </div>\n        <div className=\"Stack\">\n            Stack\n            <p>\n            Materials are placed on the \"stack\" with various effects triggering at different times. This stack's max\n            size is currently set at 4. When a material is placed and the max size is exceeded, the bottom material\n            is popped off.\n            </p>\n            <div>\n                {matStack.map((mat, i) =>\n                    <Material key={i} color={mat.color} shape={mat.shape}>{mat.score}</Material>\n                )}\n            </div>\n            <button className=\"Btn\" onClick={calculateFinalScore}>Done</button>\n        </div>\n        <div className=\"Score\">\n            Score\n            <p>The score is the sum of the current materials on the stack, plus any additional effects that trigger\n            on completion.\n            </p>\n            <p>Final Score: {totalScore}</p>\n        </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}